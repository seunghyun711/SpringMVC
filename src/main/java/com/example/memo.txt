<Jakarta Bean Validation>
-> dto클래스에의 유효성 검사를 위해 사용했던 애너테이션(@Valid)은 Jakarta Bean Validation이라는 유효성 검증을 위한 표준 스팩에서 지원하는 내장 애너테이션들이다.
Jakarta Bean Validation스펙을 구현한 구현체는 Hibernate Validator다.
Java Bean스펙을 준수하는 Java클래스는 Jakarta Bean Validation의 애너테이션을 사용하여 유효성 검증을 할 수 있다.

-> 만약 Jakarta Bean Validation의 애너테이션 중 목적에 맞는 애너테이션이 없을 수 있다.
이 떄 Custom Validator를 사용하여 목적에 맞는 애너테이션을 직접 만들어 적용할 수 있다.

-> Custom Validator 구현 절차
1. Custom Validator를 사용하기 위한 Custom 애너테이션 적용
2. 정의한 Custom 애너테이션에 바인딩 되는 Custom Validator를 구현한다.
3. 유효성 검증이 필요한 dto클래스의 멤버 변수에 Custom 애너테이션을 추가한다.

<서비스 계층과 API계층 연동(DI 적용O) - 까지의 문제점>
1. Controller 클래스에 있는 핸들러 메서드의 역할
- 핸들러 메서드 역할은 클라이언트로부터 전달 받은 요청 데이터를 Service 클래스로 전달하고, 응답 데이터를 클라이언트로 전달하는 역할이다.
그런데 현재 MemberContrller는 핸들러 메서드가 DTO 클래스를 Entity 객체로 변환하는 역할까지 맡고 있다.

2. Service계층에서 사용되는 Entity 객체를 클라이언트의 응답으로 전송한다.
- dto 클래스는 API 계층에서만 데이터를 처리하는 역할을 하고, Entity 클래스는 서비스 계층에서만 데이터를 처리하는 역할을 하여 각 클래스 간
역할 분담이 이루어저야 하는데 Entity 객체가 dto 역할까지 담당하여 계층 간 역할 분리가 이루어지지 않았다.

-> 이 문제를 해결하기 위해 dto 클래스와 entity 클래스를 서로 변환해주는 mapper를 만들어 따로 구현한다.

<MapStruct를 이용한 Mapper 자동 생성>
-> MapStruct를 사용하면 dto 클래스와 entity 객체 간 변환 작업을 편리하게 할 수 있다.
-> MapStruct는 매퍼 구현 클래스를 자동으로 생성하는 코드 자동 생성기다.

<DTO 클래스와 엔티티 클래스 분리 이유>
1. 계층별 관심사 분리
2. 코드 구성 단순화
3. REST API 독립성 확보 DTO클래스를 사용하면 원하는 정보만 담아서 제공할 수 있다. 반면 entity클래스에는 해당 객체의 모든 정보가 들어있기 때문에
공개하기를 원하지 않은 정보도 전달된다.

<ExceptionHandler>
-> ExceptionHandler로 예외처리를 할 수 있다.

- 단점
1. 각 Controller클래스에서 @ExceptionHandler를 사용해 RequestBody에 대한 유효성 검증 실패에 대한 에러 처리를 해야 하기 때문에
각 Controller클래스마다 해당 예외처리를 위한 코드가 반복된다.
2. Controller에서 처리해야 하는 예외는 유효성 검증 실패에 대한 예외만 있는 것이 아니기 때문에 하나의 Controller 클래스에 여러 예외에 대한
예외 처리 코드를 작성하게 되므로 @ExceptionHandler를 추가한 에러 처리 핸들러가 코드에 많아지게 된다. -> 코드가 복잡해진다.

<@RestControllerAdvice>
-> RestControllerAdvice는 Controller클래스에서 @ExceptionHandler, @InitBinder, @ModelAttribute가 추가된 메서드를 공유해서 사용한다.
 @RestControllerAdvice를 추가한 클래스를 이용하면 예외처리를 공통화할 수 있다.

<@RestControllerAdvice VS @ControllerAdvice>
@RestControllerAdvice는 @ControllerAdvice의 기능을 포함하고 있고, @ResponseBody의 기능도 포함하고 있다. 따라서
JSON형태의 데이터를 ResponseBody로 전송하기 위해 ResponseEntity로 데이터를 변환할 필요가 없다.

<@RestControllerAdvice에서 @ResponseStatus 를 쓸까? ResponseEntity을 쓸까?>
한가지 유형으로 고정된 예외를 처리할 경우 @ResponseStatus로 HttpStatus를 지정해서 사용하고,
다양한 유형의 사용자 정의 예외를 처리하고자 하는 경우에는 ResponseEntity를 사용한다.

<애그리거트 Aggregate>
애그리거트 : 비슷한 업무 도메인의 묶음
애그리거트 루트 : 하나의 애그리거트를 대표하는 도메인

<애그리거트 객체 매핑 규칙>
1. 모든 엔티티 객체의 상태는 애그리거트 루트를 통해서만 변경할 수 있다.
2. 하나의 동일한 애그리거트 내에서는 엔티티 간 객체로 참조한다.
3. 애그리거트 루트 대 애그리거트 루트 간 엔티티 객체 참조
-> 애그리거트 루트 간의 참조는 객체 참조 대신 id로 참조한다.
-> 1:1과 1:n관계일 때는 테이블 간 외래키 방식과 동일
-> n:n관계는 외래키 방식인 id 참조와 객체 참조 방식이 함께 사용된다.

※ 애그리거트 루트를 먼저 거쳐서 규칙을 검증한 후에 검증에 통과하면 엔티티 상태를 업데이티 하는 방식으로 도메인 규칙의 일관성을 유지한다.

------------------------------------------------------------ JPA ----------------------------------------------------------------
<EntityManager의 flush() API>
tx.commit()이 호출되면 JPA 내부적으로 em.flush()가 호출되어 영속성 컨텍스트의 변경내용을 데이터베이스에 반영한다.

<기본키 생성 전략>
IDENTITY
-> 기본키 생성을 데이터베이스에 위임
-> 테이블에 데이터를 INSERT한 후 식별자를 얻을 수 있다.
-> 영속성 컨텍스트에 저장하려면 테이블에 INSERT를 먼저 해야하기 떄문에 commit()을 명시적으로 호출하지 않아도 persist() 호출 시 commit이 일어난다.

SEQUENCE
-> 테이블에 데이터를 INSERT 하기 위해 SEQUENCE로부터 미리 식별자를 얻을 수 있다.
-> persist()시 영속성 컨텍스트에 엔티티가 저장되고 commit()하기 전까지 테이블에 반영되지 않는다.

< @Enumerated(EnumType.STRING) VS  @Enumerated(EnumType.ORDINAL)>
@Enumerated(EnumType.ORDINAL) : enum의 순서를 니타내는 숫자를 테이블에 저장
@Enumerated(EnumType.STRING) : enum의 이름을 테이블에 저장
ORDINAL은 기존에 정의된 enum 순서 번호와 enum에 정의된 순서가 일치하지 않는 경우 문제가 발생한다.

<객체 그래프 탐색>
findOrder.getMember().getMemberId()와 같이 객체를 통해 다른 객체의 정보를 가져오는 것

<JPQL>
-> 객체 지향 쿼리.
-> 데이터베이스의 테이블을 대상으로 데이터 작업을 하는 것이 아니라 엔티티 클래스의 객체를 대상으로 객체를 다룬다.

------------------------------------------------------------ 트랜잭션 ----------------------------------------------------------------
<트랜잭션>
-> 여러개의 작업들을 하나의 그룹으로 묶어서 처리하는 것
-> 하나의 작업 그룹이 실행 중 하나라도 실패하면 롤백 된다.

<읽기 전용 트랜잭션>
@Transactional(readOnly = tru)로 설정하면 일기 전용 트랜잭션이 적용된다.
읽기 전용 트랜잭션을 적용하면 해당 트랜잭션은 commit 시 영속성 컨텍스트를 flush 하지 않는다.
조회 메서드에 읽기 전용 트랜잭션을 적용하면 flush 처리를 하지 않고 스냅샷도 생성하지 않아 불필요한 작업을 줄여 효율을 높일 수 있다.

<클래스 레벨 메서드와 메서들 레벨 메서드의 적용 순서>
클래스에만 Transactional이 적용된 경우 클래스 레벨의 @Transactional 애너테이션이 메서드에 일괄 적용된다.
클래스 레벨과 메서드 레벨이 같이 쓰인 경우 메서드 레벨의 @Transactional이 적용되고, 클래스 레벨의 @Transcational이 적용된다.


